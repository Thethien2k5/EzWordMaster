package com.example.ezwordmaster.domain.repository

import android.content.Context
import android.util.Log
import com.example.ezwordmaster.domain.model.Topic
import com.example.ezwordmaster.domain.model.Word
import kotlinx.serialization.encodeToString
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import java.io.File

class TopicRepository(private val context: Context) {

    private val FILE_NAME = "topics.json"
    private val json = Json { prettyPrint = true }

    // ƒê∆∞·ªùng d·∫´n t·ªõi file topics.json trong th∆∞ m·ª•c ri√™ng c·ªßa app
    private fun getTopicsFile(): File = File(context.filesDir, FILE_NAME)

    // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    fun isTopicsFileExists(): Boolean {
        val exists = getTopicsFile().exists()
        Log.d("TopicRepo", "File t·ªìn t·∫°i: $exists")
        return exists
    }

    //  T·∫°o file m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
    fun createTopicsFileIfMissing() {
        val file = getTopicsFile()
        if (!file.exists()) {
            val defaultTopics = listOf(
                Topic(
                    id = "1",
                    name = "Learning environment",
                    words = listOf(
                        Word("Student", "H·ªçc sinh"),
                        Word("Teacher", "Gi√°o vi√™n"),
                        Word("Classroom", "L·ªõp h·ªçc"),
                        Word("School", "Tr∆∞·ªùng h·ªçc"),
                        Word("Homework", "B√†i t·∫≠p v·ªÅ nh√†"),
                        Word("Exam", "K·ª≥ thi"),
                        Word("Test", "B√†i ki·ªÉm tra"),
                        Word("Grade", "ƒêi·ªÉm s·ªë"),
                        Word("Subject", "M√¥n h·ªçc"),
                        Word("Lesson", "B√†i h·ªçc"),
                        Word("Book", "S√°ch"),
                        Word("Notebook", "V·ªü ghi"),
                        Word("Pen", "B√∫t m·ª±c"),
                        Word("Pencil", "B√∫t ch√¨"),
                        Word("Eraser", "C·ª•c t·∫©y"),
                        Word("Ruler", "Th∆∞·ªõc k·∫ª"),
                        Word("Bag", "C·∫∑p s√°ch"),
                        Word("Uniform", "ƒê·ªìng ph·ª•c"),
                        Word("Break", "Gi·ªù gi·∫£i lao"),
                        Word("Lunch", "B·ªØa tr∆∞a"),
                        Word("Library", "Th∆∞ vi·ªán"),
                        Word("Laboratory", "Ph√≤ng th√≠ nghi·ªám"),
                        Word("Playground", "S√¢n ch∆°i"),
                        Word("Friend", "B·∫°n b√®"),
                        Word("Classmate", "B·∫°n c√πng l·ªõp"),
                        Word("Principal", "Hi·ªáu tr∆∞·ªüng"),
                        Word("Study", "H·ªçc t·∫≠p"),
                        Word("Learn", "H·ªçc h·ªèi"),
                        Word("Teach", "D·∫°y"),
                        Word("Read", "ƒê·ªçc"),
                        Word("Write", "Vi·∫øt"),
                        Word("Calculate", "T√≠nh to√°n"),
                        Word("Remember", "Ghi nh·ªõ"),
                        Word("Understand", "Hi·ªÉu"),
                        Word("Practice", "Luy·ªán t·∫≠p"),
                        Word("Project", "D·ª± √°n"),
                        Word("Presentation", "B√†i thuy·∫øt tr√¨nh"),
                        Word("Group", "Nh√≥m"),
                        Word("Teamwork", "L√†m vi·ªác nh√≥m"),
                        Word("Knowledge", "Ki·∫øn th·ª©c")
                    )
                )
            )
            saveTopics(defaultTopics)
            Log.d("TopicRepo", "ƒê√£ t·∫°o file topics.json m·∫∑c ƒë·ªãnh")
        }
    }

    // ƒê·ªçc d·ªØ li·ªáu t·ª´ file
    fun loadTopics(): List<Topic> {
        createTopicsFileIfMissing()
        val file = getTopicsFile()

        return try {
            val jsonString = file.readText()
            json.decodeFromString(jsonString)
        } catch (e: Exception) {
            Log.e("TopicRepo", "L·ªói ƒë·ªçc file: ${e.message}")
            emptyList()
        }
    }

    // Ghi ƒë√® to√†n b·ªô danh s√°ch (ch·ªâ d√πng n·ªôi b·ªô)
    private fun saveTopics(topics: List<Topic>) {
        try {
            val jsonString = json.encodeToString(topics)
            getTopicsFile().writeText(jsonString)
            Log.d("TopicRepo", "ƒê√£ l∆∞u ${topics.size} topics v√†o file.")
        } catch (e: Exception) {
            Log.e("TopicRepo", " L·ªói khi ghi file: ${e.message}")
        }
    }

    //  Th√™m ho·∫∑c c·∫≠p nh·∫≠t m·ªôt topic (th√¥ng minh)
    fun addOrUpdateTopic(newTopic: Topic) {
        val currentTopics = loadTopics().toMutableList()
        val existing = currentTopics.find {
            it.id == newTopic.id || it.name.equals(newTopic.name, ignoreCase = true)
        }

        if (existing == null) {
            //  N·∫øu ch∆∞a t·ªìn t·∫°i ‚Üí th√™m m·ªõi
            currentTopics.add(newTopic)
            Log.d("TopicRepo", "ƒê√£ th√™m ch·ªß ƒë·ªÅ m·ªõi: ${newTopic.name}")
        } else {
            // Ki·ªÉm tra danh s√°ch t·ª´ c√≥ gi·ªëng h·ªát kh√¥ng
            val sameWords = existing.words.size == newTopic.words.size &&
                    existing.words.containsAll(newTopic.words)

            if (sameWords) {
                Log.d("TopicRepo", "Ch·ªß ƒë·ªÅ '${newTopic.name}' ƒë√£ t·ªìn t·∫°i v√† gi·ªëng h·ªát, b·ªè qua.")
                return
            } else {
                // C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ (thay th·∫ø danh s√°ch t·ª´)
                val index = currentTopics.indexOf(existing)
                currentTopics[index] = newTopic
                Log.d("TopicRepo", " C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ '${newTopic.name}' v·ªõi danh s√°ch t·ª´ m·ªõi.")
            }
        }

        saveTopics(currentTopics)
    }

    // Ki·ªÉm tra tr√πng ID ho·∫∑c t√™n (public d√πng cho form th√™m ch·ªß ƒë·ªÅ)
    fun isTopicDuplicate(topic: Topic): Boolean {
        val topics = loadTopics()
        return topics.any {
            it.id == topic.id || it.name.equals(topic.name, ignoreCase = true)
        }
    }

    //  X√≥a m·ªôt topic theo id
    fun deleteTopicById(id: String) {
        val currentTopics = loadTopics().filterNot { it.id == id }
        saveTopics(currentTopics)
        Log.d("TopicRepo", "üóë ƒê√£ x√≥a ch·ªß ƒë·ªÅ c√≥ id=$id")
    }
}
