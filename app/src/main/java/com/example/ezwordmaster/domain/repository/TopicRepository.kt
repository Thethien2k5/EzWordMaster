package com.example.ezwordmaster.domain.repository

import android.content.Context
import android.util.Log
import com.example.ezwordmaster.domain.model.Topic
import com.example.ezwordmaster.domain.model.Word
import kotlinx.serialization.encodeToString
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import java.io.File

class TopicRepository(private val context: Context) {

    private val FILE_NAME = "topics.json"
    private val json = Json { prettyPrint = true }

    // ƒê∆∞·ªùng d·∫´n t·ªõi file topics.json trong th∆∞ m·ª•c ri√™ng c·ªßa app
    private fun getTopicsFile(): File = File(context.filesDir, FILE_NAME)

    // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    fun isTopicsFileExists(): Boolean {
        val exists = getTopicsFile().exists()
        Log.d("TopicRepo", "File t·ªìn t·∫°i: $exists")
        return exists
    }
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ file
    fun loadTopics(): List<Topic> {
        createTopicsFileIfMissing()
        val file = getTopicsFile()

        return try {
            val jsonString = file.readText()
            json.decodeFromString(jsonString)
        } catch (e: Exception) {
            Log.e("TopicRepo", "L·ªói ƒë·ªçc file: ${e.message}")
            emptyList()
        }
    }
    // Ghi ƒë√® to√†n b·ªô danh s√°ch (ch·ªâ d√πng n·ªôi b·ªô)
    private fun saveTopics(topics: List<Topic>) {
        try {
            val jsonString = json.encodeToString(topics)
            getTopicsFile().writeText(jsonString)
            Log.d("TopicRepo", "ƒê√£ l∆∞u ${topics.size} topics v√†o file.")
        } catch (e: Exception) {
            Log.e("TopicRepo", " L·ªói khi ghi file: ${e.message}")
        }
    }
    //***** ====== T·∫†O ============ ********
    //  T·∫°o file m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
    fun createTopicsFileIfMissing() {
        val file = getTopicsFile()
        if (!file.exists()) {
            val defaultTopics = listOf(
                Topic(
                    id = "14",
                    name = "Ch√†o m·ª´ng ƒë·∫øn v·ªõi EzWordMaster",
                    words = listOf(
                        Word("Welcome", "Ch√†o m·ª´ng"),
                        Word("Friend", "B·∫°n b√®"),
                        Word("Happy", "H·∫°nh ph√∫c"),
                        Word("Smile", "N·ª• c∆∞·ªùi"),
                        Word("Hello", "Xin ch√†o"),
                        Word("Greeting", "L·ªùi ch√†o"),
                        Word("Warm", "·∫§m √°p"),
                        Word("Joy", "Ni·ªÅm vui"),
                        Word("Peace", "B√¨nh y√™n"),
                        Word("Love", "Y√™u th∆∞∆°ng"),
                        Word("Kind", "T·ª≠ t·∫ø"),
                        Word("Share", "Chia s·∫ª"),
                        Word("Together", "C√πng nhau"),
                        Word("Success", "Th√†nh c√¥ng")
                    )
                )
            )
            saveTopics(defaultTopics)
            Log.d("TopicRepo", "ƒê√£ t·∫°o file topics.json m·∫∑c ƒë·ªãnh")
        }
    }

    // T·∫°o ID m·ªõi cho topic, t·∫°o id nh·ªè ch t·ªìn t·∫°i ( l·∫•y ƒë·∫ßy kho·∫£ng tr·ªëng id )
    fun generateNewTopicId(): String {
        val topics = loadTopics()
        val existingIds = topics.mapNotNull { it.id?.toIntOrNull() }.sorted()

        var newId = 1
        for (id in existingIds) {
            if (id == newId) {
                newId++
            } else if (id > newId) {
                break
            }
        }
        return newId.toString()
    }

    //******* ========== TH√äM =================== **************
    //  Th√™m ho·∫∑c c·∫≠p nh·∫≠t m·ªôt topic (th√¥ng minh)
    fun addOrUpdateTopic(newTopic: Topic) {
        val currentTopics = loadTopics().toMutableList()
        val existing = currentTopics.find {
            it.id == newTopic.id || it.name.equals(newTopic.name, ignoreCase = true)
        }

        if (existing == null) {
            //  N·∫øu ch∆∞a t·ªìn t·∫°i ‚Üí th√™m m·ªõi
            currentTopics.add(newTopic)
            Log.d("TopicRepo", "ƒê√£ th√™m ch·ªß ƒë·ªÅ m·ªõi: ${newTopic.name}")
        } else {
            // Ki·ªÉm tra danh s√°ch t·ª´ c√≥ gi·ªëng h·ªát kh√¥ng
            val sameWords = existing.words.size == newTopic.words.size &&
                    existing.words.containsAll(newTopic.words)

            if (sameWords) {
                Log.d("TopicRepo", "Ch·ªß ƒë·ªÅ '${newTopic.name}' ƒë√£ t·ªìn t·∫°i v√† gi·ªëng h·ªát, b·ªè qua.")
                return
            } else {
                // C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ (thay th·∫ø danh s√°ch t·ª´)
                val index = currentTopics.indexOf(existing)
                currentTopics[index] = newTopic
                Log.d("TopicRepo", " C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ '${newTopic.name}' v·ªõi danh s√°ch t·ª´ m·ªõi.")
            }
        }
        saveTopics(currentTopics)
    }
    // Th√™m t·ª´ v√†o ch·ªß ƒë·ªÅ
    fun addWordToTopic(topicId: String, word: Word) {
        val topics = loadTopics().toMutableList()
        val index = topics.indexOfFirst { it.id == topicId }

        if (index != -1) {
            val updatedWords = topics[index].words.toMutableList()
            updatedWords.add(word)
            topics[index] = topics[index].copy(words = updatedWords)
            saveTopics(topics)
            Log.d("TopicRepo", "‚ûï ƒê√£ th√™m t·ª´ '${word.word}' v√†o ch·ªß ƒë·ªÅ")
        }
    }
    //Th√™m t√™n ch·ªß ƒë·ªÅ m·ªõi
    fun addNameTopic(newName: String) {
        val topics = loadTopics().toMutableList()
        val newId = generateNewTopicId()

        val newTopic = Topic(
            id = newId,
            name = newName,
            words = emptyList()
        )

        topics.add(newTopic)
        saveTopics(topics)

        Log.d("TopicRepo", "üÜï ƒê√£ th√™m ch·ªß ƒë·ªÅ m·ªõi: id=$newId, name=$newName")
    }

    //*** ================= X√ìA ===============================
    //  X√≥a m·ªôt topic theo id
    fun deleteTopicById(id: String) {
        val currentTopics = loadTopics().filterNot { it.id == id }
        saveTopics(currentTopics)
        Log.d("TopicRepo", "üóë ƒê√£ x√≥a ch·ªß ƒë·ªÅ c√≥ id=$id")
    }
    // X√≥a t·ª´ kh·ªèi ch·ªß ƒë·ªÅ
    fun deleteWordFromTopic(topicId: String, word: Word) {
        val topics = loadTopics().toMutableList()
        val index = topics.indexOfFirst { it.id == topicId }

        if (index != -1) {
            val updatedWords = topics[index].words.toMutableList()
            updatedWords.removeAll { it.word == word.word && it.meaning == word.meaning }
            topics[index] = topics[index].copy(words = updatedWords)
            saveTopics(topics)
            Log.d("TopicRepo", "üóëÔ∏è ƒê√£ x√≥a t·ª´ '${word.word}' kh·ªèi ch·ªß ƒë·ªÅ")
        }
    }


    // *** =============== C·∫¨P NH·∫¨T  =========================
    // C·∫≠p nh·∫≠t t√™n ch·ªß ƒë·ªÅ
    fun updateTopicName(id: String, newName: String) {
        val topics = loadTopics().toMutableList()
        val index = topics.indexOfFirst { it.id == id }

        if (index != -1) {
            topics[index] = topics[index].copy(name = newName)
            saveTopics(topics)
            Log.d("TopicRepo", "‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t t√™n ch·ªß ƒë·ªÅ: $newName")
        }
    }

    // C·∫≠p nh·∫≠t t·ª´ trong ch·ªß ƒë·ªÅ
    fun updateWordInTopic(topicId: String, oldWord: Word, newWord: Word) {
        val topics = loadTopics().toMutableList()
        val index = topics.indexOfFirst { it.id == topicId }

        if (index != -1) {
            val updatedWords = topics[index].words.toMutableList()
            val wordIndex = updatedWords.indexOfFirst {
                it.word == oldWord.word && it.meaning == oldWord.meaning
            }

            if (wordIndex != -1) {
                updatedWords[wordIndex] = newWord
                topics[index] = topics[index].copy(words = updatedWords)
                saveTopics(topics)
                Log.d("TopicRepo", "‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t t·ª´ '${newWord.word}'")
            }
        }
    }

    // L·∫•y m·ªôt topic theo ID
    fun getTopicById(id: String): Topic? {
        return loadTopics().find { it.id == id }
    }

    // Ki·ªÉm tra tr√πng ID ho·∫∑c t√™n (public d√πng cho form th√™m ch·ªß ƒë·ªÅ)
    fun isTopicDuplicate(topic: Topic): Boolean {
        val topics = loadTopics()
        return topics.any {
            it.id == topic.id || it.name.equals(topic.name, ignoreCase = true)
        }
    }
}
