package com.example.ezwordmaster.ui.screens.practice

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.example.ezwordmaster.R
import com.example.ezwordmaster.ui.common.AppBackground

@Composable
fun WordPracticeScreen(
    navController: NavHostController,
    topicId: String?,
    viewModel: PracticeViewModel
) {
    val selectedTopic by viewModel.selectedTopic.collectAsState()
    val scrollState = rememberScrollState()

    LaunchedEffect(topicId) {
        if (!topicId.isNullOrEmpty()) {
            viewModel.loadTopicById(topicId)
        }
    }

    AppBackground {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            // Header v·ªõi n√∫t back v√† t√™n ch·ªß ƒë·ªÅ
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.return_),
                    contentDescription = "Back",
                    tint = Color(0xFF4CAF50),
                    modifier = Modifier
                        .size(45.dp)
                        .clickable { navController.popBackStack() }
                )

                Text(
                    text = selectedTopic?.name ?: "ƒêang t·∫£i...",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.Black,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.weight(1f)
                )

                // Ch·ªó tr·ªëng ƒë·ªÉ c√¢n b·∫±ng b·ªë c·ª•c
                Spacer(modifier = Modifier.size(45.dp))
            }

            Spacer(modifier = Modifier.height(24.dp))

            // N·ªôi dung c√≥ th·ªÉ cu·ªôn
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(scrollState)
            ) {
                // ============ PH·∫¶N 1: √îN T·∫¨P ============
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "üìö √îN T·∫¨P",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF2196F3)
                    )

                    // N√∫t l·ªãch s·ª≠ √¥n t·∫≠p (nh·ªè g·ªçn, n·∫±m ngang)
                    Card(
                        modifier = Modifier.clickable { navController.navigate("studyhistory") },
                        shape = RoundedCornerShape(20.dp),
                        colors = CardDefaults.cardColors(containerColor = Color(0xFFE8F5E9)),
                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                    ) {
                        Row(
                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            Text(
                                text = "üìä",
                                fontSize = 20.sp
                            )
                            Text(
                                text = "L·ªãch s·ª≠",
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Medium,
                                color = Color.Black
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.height(12.dp))

                // Card container cho m·ª•c √¥n t·∫≠p (ch·ªâ c√≤n Flashcard)
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(16.dp),
                    colors = CardDefaults.cardColors(containerColor = Color.White.copy(alpha = 0.9f)),
                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        // Flashcard (card ngang v·ªõi icon l·ªõn)
                        StudyModeCardHorizontal(
                            icon = "üìá",
                            title = "Flashcard",
                            description = "L·∫≠t th·∫ª ƒë·ªÉ h·ªçc t·ª´ v·ª±ng",
                            backgroundColor = Color(0xFFE3F2FD),
                            onClick = { navController.navigate("flashcard/$topicId") }
                        )

                        // Placeholder cho ch·∫ø ƒë·ªô √¥n t·∫≠p kh√°c
                        StudyModeCardHorizontal(
                            icon = "‚úçÔ∏è",
                            title = "Ch·∫ø ƒë·ªô kh√°c",
                            description = "ƒêang c·∫≠p nh·∫≠t...",
                            backgroundColor = Color(0xFFF3E5F5),
                            enabled = false,
                            onClick = { /* Coming soon */ }
                        )
                    }
                }

                Spacer(modifier = Modifier.height(32.dp))

                // ============ PH·∫¶N 2: GI·∫¢I TR√ç ============
                Text(
                    text = "üéÆ GI·∫¢I TR√ç",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFFF9800),
                    modifier = Modifier.padding(horizontal = 0.dp)
                )

                Spacer(modifier = Modifier.height(12.dp))

                // Card container cho gi·∫£i tr√≠ (c√≥ th·ªÉ cu·ªôn)
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(16.dp),
                    colors = CardDefaults.cardColors(containerColor = Color.White.copy(alpha = 0.9f)),
                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        // L·∫≠t th·∫ª
                        EntertainmentModeCard(
                            icon = "üé¥",
                            title = "L·∫≠t th·∫ª",
                            description = "Gh√©p t·ª´ v·ªõi nghƒ©a t∆∞∆°ng ·ª©ng",
                            backgroundColor = Color(0xFFFFF3E0),
                            onClick = { navController.navigate("wordselection/$topicId") }
                        )

                        // Placeholder cho c√°c ch·∫ø ƒë·ªô kh√°c (c√≥ th·ªÉ th√™m nhi·ªÅu)
                        EntertainmentModeCard(
                            icon = "üéØ",
                            title = "Tr·∫Øc nghi·ªám",
                            description = "ƒêang c·∫≠p nh·∫≠t...",
                            backgroundColor = Color(0xFFF3E5F5),
                            enabled = false,
                            onClick = { /* Coming soon */ }
                        )

                        EntertainmentModeCard(
                            icon = "üé≤",
                            title = "Tr√≤ ch∆°i gh√©p t·ª´",
                            description = "ƒêang c·∫≠p nh·∫≠t...",
                            backgroundColor = Color(0xFFE0F2F1),
                            enabled = false,
                            onClick = { /* Coming soon */ }
                        )

                        EntertainmentModeCard(
                            icon = "üèÜ",
                            title = "Th·ª≠ th√°ch t·ªëc ƒë·ªô",
                            description = "ƒêang c·∫≠p nh·∫≠t...",
                            backgroundColor = Color(0xFFFFEBEE),
                            enabled = false,
                            onClick = { /* Coming soon */ }
                        )

                        EntertainmentModeCard(
                            icon = "üé™",
                            title = "Tr√≤ ch∆°i kh√°c",
                            description = "ƒêang c·∫≠p nh·∫≠t...",
                            backgroundColor = Color(0xFFFCE4EC),
                            enabled = false,
                            onClick = { /* Coming soon */ }
                        )
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                // Logo ·ªü cu·ªëi
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 20.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.logo),
                        contentDescription = "Logo",
                        modifier = Modifier.size(100.dp),
                        alpha = 0.3f
                    )
                }
            }
        }
    }
}

/**
 * Card ngang cho ch·∫ø ƒë·ªô √¥n t·∫≠p (c√≥ icon l·ªõn v√† m√¥ t·∫£)
 */
@Composable
fun StudyModeCardHorizontal(
    icon: String,
    title: String,
    description: String,
    backgroundColor: Color,
    enabled: Boolean = true,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(enabled = enabled, onClick = onClick),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(
            containerColor = if (enabled) backgroundColor else Color.LightGray.copy(alpha = 0.3f)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = if (enabled) 2.dp else 0.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Icon
            Text(
                text = icon,
                fontSize = 48.sp,
                modifier = Modifier.padding(end = 16.dp)
            )

            // Th√¥ng tin
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = title,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = if (enabled) Color.Black else Color.Gray
                )

                Spacer(modifier = Modifier.height(4.dp))

                Text(
                    text = description,
                    fontSize = 13.sp,
                    color = if (enabled) Color.Gray else Color.LightGray
                )
            }

            // Arrow icon
            if (enabled) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_triangle),
                    contentDescription = "Go",
                    tint = Color.Gray,
                    modifier = Modifier.size(20.dp)
                )
            }
        }
    }
}

/**
 * Card cho gi·∫£i tr√≠ (design ngang, c√≥ m√¥ t·∫£)
 */
@Composable
fun EntertainmentModeCard(
    icon: String,
    title: String,
    description: String,
    backgroundColor: Color,
    enabled: Boolean = true,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(enabled = enabled, onClick = onClick),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(
            containerColor = if (enabled) backgroundColor else Color.LightGray.copy(alpha = 0.3f)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = if (enabled) 2.dp else 0.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Icon
            Text(
                text = icon,
                fontSize = 40.sp,
                modifier = Modifier.padding(end = 16.dp)
            )

            // Th√¥ng tin
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = title,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = if (enabled) Color.Black else Color.Gray
                )

                Spacer(modifier = Modifier.height(4.dp))

                Text(
                    text = description,
                    fontSize = 12.sp,
                    color = if (enabled) Color.Gray else Color.LightGray
                )
            }

            // Arrow icon
            if (enabled) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_triangle),
                    contentDescription = "Go",
                    tint = Color.Gray,
                    modifier = Modifier.size(20.dp)
                )
            }
        }
    }
}